# -*- coding: utf-8 -*-
"""
–¢–æ–ø–∫–æ–Ω‚Äë–±–æ—Ç¬†v2.5¬†‚Äî —Ñ–∏–∫—Å—ã –ª–æ–≥–∏–∫–∏‚ÄØ–∏¬†–æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π —É–ø—Ä–æ—â–µ–Ω—ã
‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞ –±–æ—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ UID –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Google Sheets –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–∫ –≤ v2.4
"""

from __future__ import annotations
import datetime, os, threading
from zoneinfo import ZoneInfo
from typing import Final, Optional

from flask import Flask
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound

TOKEN: Final[str] = os.getenv("TOKEN", "")
TZ = ZoneInfo("Europe/Moscow")

(
    REG_NAME,
    REG_CAR,
    START_ODO,
    START_PHOTO,
    FUEL_PHOTO,
    FUEL_COST,
    FUEL_LITERS,
    END_ODO,
    END_PHOTO,
) = range(9)

_HEADER: Final[list[str]] = [
    "–î–∞—Ç–∞", "UID", "–§–ò–û", "–ê–≤—Ç–æ", "–¢–∏–ø", "–í—Ä–µ–º—è", "–û–î–û", "–§–æ—Ç–æ", "–õ–∏—Ç—Ä—ã", "–°—É–º–º–∞", "Œî_–∫–º", "–õ–∏—á–Ω—ã–π_–∫–º",
]
_COL_INDEX = {c: i for i, c in enumerate(_HEADER)}

def _fake_web() -> None:
    app = Flask(__name__)
    @app.get("/")
    def ping():
        return "Bot is alive!", 200
    app.run(host="0.0.0.0", port=8080)

threading.Thread(target=_fake_web, daemon=True).start()

def _init_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        os.getenv("GOOGLE_APPLICATION_CREDENTIALS"), scope
    )
    gs = gspread.authorize(creds)
    wb = gs.open_by_key(os.getenv("SPREADSHEET_ID"))
    log_ws = wb.sheet1
    if log_ws.row_values(1) != _HEADER:
        log_ws.clear()
        log_ws.append_row(_HEADER)
    try:
        drv_ws = wb.worksheet("Drivers")
    except WorksheetNotFound:
        drv_ws = wb.add_worksheet("Drivers", 1000, 3)
        drv_ws.append_row(["UID", "–§–ò–û", "–ê–≤—Ç–æ"])
    return log_ws, drv_ws

LOG_WS, DRV_WS = _init_sheets()
DRIVERS: dict[str, dict[str, str]] = {
    r[0]: {"name": r[1], "car": r[2]} for r in DRV_WS.get_all_values()[1:]
}

def _now() -> str:
    return datetime.datetime.now(TZ).isoformat(timespec="seconds")

def _append_log(type_: str, uid: str, **fields) -> None:
    if uid not in DRIVERS:
        return
    row = ["" for _ in _HEADER]
    row[_COL_INDEX["–î–∞—Ç–∞"]] = datetime.date.today(TZ).isoformat()
    row[_COL_INDEX["UID"]] = uid
    row[_COL_INDEX["–§–ò–û"]] = DRIVERS[uid]["name"]
    row[_COL_INDEX["–ê–≤—Ç–æ"]] = DRIVERS[uid]["car"]
    row[_COL_INDEX["–¢–∏–ø"]] = type_
    row[_COL_INDEX["–í—Ä–µ–º—è"]] = _now()
    for k, v in fields.items():
        if k in _COL_INDEX:
            row[_COL_INDEX[k]] = v
    LOG_WS.append_row(row)

def _last_odo(uid: str, only_type: Optional[str] = None) -> Optional[int]:
    for record in reversed(LOG_WS.get_all_records())[::-1]:
        if record["UID"] != uid:
            continue
        if only_type and record["–¢–∏–ø"] != only_type:
            continue
        try:
            return int(record["–û–î–û"])
        except (ValueError, TypeError):
            continue
    return None

async def _ensure_reg(update: Update) -> bool:
    uid = str(update.effective_user.id)
    if uid in DRIVERS:
        return True
    await update.message.reply_text("üöó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    return False

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid in DRIVERS:
        await update.message.reply_text(
            "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/startshift ‚Äì –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã\n/fuel ‚Äì –∑–∞–ø—Ä–∞–≤–∫–∞\n/endshift ‚Äì –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã"
        )
        return ConversationHandler.END
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return REG_NAME

async def reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name_tmp"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:")
    return REG_CAR

async def reg_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    name = context.user_data.pop("name_tmp")
    car = update.message.text.strip()
    DRV_WS.append_row([uid, name, car])
    DRIVERS[uid] = {"name": name, "car": car}
    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startshift –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã")
    return ConversationHandler.END

registration_conv = ConversationHandler(
    entry_points=[CommandHandler("start", cmd_start)],
    states={
        REG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
        REG_CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_car)],
    },
    fallbacks=[],
)

async def startshift_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_reg(update): return ConversationHandler.END
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:")
    return START_ODO

async def startshift_odo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        odo_val = int(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–±–µ–≥:")
        return START_ODO
    context.user_data["start_odo"] = odo_val
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞:")
    return START_PHOTO

async def startshift_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_id = update.message.photo[-1].file_id if update.message.photo else ""
    uid = str(update.effective_user.id)
    odo_start = context.user_data.pop("start_odo")
    personal_km = odo_start - (_last_odo(uid, only_type="End") or odo_start)
    _append_log("Start", uid, –û–î–û=odo_start, –§–æ—Ç–æ=photo_id, –õ–∏—á–Ω—ã–π_–∫–º=personal_km)
    await update.message.reply_text("‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /fuel –∏–ª–∏ /endshift")
    return ConversationHandler.END

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
# fuel_conv, endshift_conv, help_cmd, main ‚Äî —Ç–µ –∂–µ, –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Ä–∞–Ω–µ–µ













