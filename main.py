# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞ + ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª-Flask,
—á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç.
"""

import os
import threading
import asyncio
import datetime
from collections import defaultdict
from zoneinfo import ZoneInfo

from flask import Flask              # –∑–∞–≥–ª—É—à–∫–∞-—Å–µ—Ä–≤–µ—Ä
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã -------------------------------------------------
BOT_NAME = "–¢–æ–ø–∫–æ–Ω"
MOSCOW_TZ = ZoneInfo("Europe/Moscow")

HEADERS = [
    "–î–∞—Ç–∞", "–í–æ–¥–∏—Ç–µ–ª—å", "–¢–∏–ø",
    "–í—Ä–µ–º—è_–ù–∞—á–∞–ª–∞", "–û–î–û_–ù–∞—á–∞–ª–∞",
    "–í—Ä–µ–º—è_–ö–æ–Ω—Ü–∞", "–û–î–û_–ö–æ–Ω–µ—Ü",
    "–ü—Ä–æ–±–µ–≥_–∫–º", "–¢–æ–ø–ª–∏–≤–æ_–ª", "–†–∞—Å—Ö–æ–¥_—Ä—É–±", "–§–æ—Ç–æ_ID",
]
ANALYTICS_HEADERS = ["–î–∞—Ç–∞", "–í–æ–¥–∏—Ç–µ–ª—å", "–ò—Ç–æ–≥–æ_—Ä—É–±"]

(
    START_ODOMETER,
    END_ODOMETER,
    FUEL_LITERS,
    FUEL_COST,
    REG_NAME,
    REG_CAR,
) = range(6)

sessions: dict[int, dict] = defaultdict(dict)

# ---------- Google Sheets ---------------------------------------------
def init_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        os.getenv("GOOGLE_APPLICATION_CREDENTIALS"), scope
    )
    client = gspread.authorize(creds)
    wb = client.open_by_key(os.getenv("SPREADSHEET_ID"))

    # –õ–∏—Å—Ç-–∂—É—Ä–Ω–∞–ª
    log_sheet = wb.sheet1
    if log_sheet.row_values(1) != HEADERS:
        log_sheet.clear()
        log_sheet.append_row(HEADERS)

    # –õ–∏—Å—Ç Drivers
    try:
        drivers_sheet = wb.worksheet("Drivers")
    except WorksheetNotFound:
        drivers_sheet = wb.add_worksheet("Drivers", rows=1000, cols=3)
        drivers_sheet.update("A1:C1", [["TelegramID", "–§–ò–û", "–ê–≤—Ç–æ"]])

    # –õ–∏—Å—Ç Analytics
    try:
        analytics_sheet = wb.worksheet("Analytics")
    except WorksheetNotFound:
        analytics_sheet = wb.add_worksheet("Analytics", rows=1000, cols=3)
        analytics_sheet.update("A1:C1", [ANALYTICS_HEADERS])

    return log_sheet, analytics_sheet, drivers_sheet


LOG_SHEET, ANALYTICS_SHEET, DRIVERS_SHEET = init_sheets()
DRIVER_MAP = {
    row[0]: {"FullName": row[1], "CarNumber": row[2] if len(row) > 2 else ""}
    for row in DRIVERS_SHEET.get_all_values()[1:]
}

# ---------- –í—Å–ø–æ–º. —Ñ—É–Ω–∫—Ü–∏–∏ -------------------------------------------
def update_daily_cost(date_str: str, driver_id: str) -> float:
    records = LOG_SHEET.get_all_records()
    total = sum(
        float(r.get("–†–∞—Å—Ö–æ–¥_—Ä—É–±", 0) or 0)
        for r in records
        if r.get("–î–∞—Ç–∞") == date_str and r.get("–¢–∏–ø") == "Fuel" and r.get("–í–æ–¥–∏—Ç–µ–ª—å") == driver_id
    )
    rows = ANALYTICS_SHEET.get_all_values()
    for idx, row in enumerate(rows[1:], start=2):
        if row[0] == date_str and row[1] == driver_id:
            ANALYTICS_SHEET.update_cell(idx, 3, total)
            break
    else:
        ANALYTICS_SHEET.append_row([date_str, driver_id, total])
    return total

async def ensure_registered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_user.id)
    if chat_id in DRIVER_MAP:
        return True
    context.user_data.clear()
    await update.message.reply_text("üöó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    return False

# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è -------------------------------------
async def reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["FullName"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    return REG_CAR

async def reg_car(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = str(update.effective_user.id)
    full_name = context.user_data.get("FullName")
    car_number = update.message.text.strip()

    DRIVERS_SHEET.append_row([chat_id, full_name, car_number])
    DRIVER_MAP[chat_id] = {"FullName": full_name, "CarNumber": car_number}
    await update.message.reply_text(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {full_name}. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /startshift")
    return ConversationHandler.END

# ---------- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_user.id)
    if chat_id in DRIVER_MAP:
        name = DRIVER_MAP[chat_id]["FullName"]
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø {BOT_NAME} ü§ñ ‚Äî –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ç–æ–ø–ª–∏–≤–∞.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/startshift ‚Äî –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã üöó\n"
            "/fuel       ‚Äî –∑–∞–ø—Ä–∞–≤–∫–∞ ‚õΩ\n"
            "/endshift   ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É üîö"
        )
    else:
        await ensure_registered(update, context)
        return REG_NAME

async def cmd_startshift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_registered(update, context):
        return REG_NAME
    await update.message.reply_text("üöó –§–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞:")
    return START_ODOMETER

async def save_start_odo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id_int = update.effective_user.id
    msg = update.message
    try:
        odo = int(msg.text.strip())
    except (ValueError, AttributeError):
        await msg.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return START_ODOMETER

    sessions[chat_id_int] = {
        "–î–∞—Ç–∞": datetime.date.today(tz=MOSCOW_TZ).isoformat(),
        "–í–æ–¥–∏—Ç–µ–ª—å": str(chat_id_int),
        "–í—Ä–µ–º—è_–ù–∞—á–∞–ª–∞": datetime.datetime.now(tz=MOSCOW_TZ).isoformat(timespec="seconds"),
        "–û–î–û_–ù–∞—á–∞–ª–∞": odo,
        "–§–æ—Ç–æ_ID": msg.photo[-1].file_id if msg.photo else "",
    }
    await msg.reply_text("‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /endshift")
    return ConversationHandler.END

async def cmd_fuel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_registered(update, context):
        return REG_NAME
    await update.message.reply_text("‚õΩ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤:")
    return FUEL_LITERS

async def fuel_liters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        liters = float(update.message.text.replace(",", "."))
        context.user_data["liters"] = liters
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –ª–∏—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return FUEL_LITERS
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö:")
    return FUEL_COST

async def fuel_cost(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        cost = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return FUEL_COST

    chat_id_int = update.effective_user.id
    chat_id = str(chat_id_int)
    photo_id = update.message.photo[-1].file_id if update.message.photo else ""
    today = datetime.date.today(tz=MOSCOW_TZ).isoformat()

    LOG_SHEET.append_row([
        today, chat_id, "Fuel", "", "", "", "", "",
        context.user_data["liters"], cost, photo_id,
    ])
    total_today = update_daily_cost(today, chat_id)
    await update.message.reply_text(f"‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢—Ä–∞—Ç—ã –∑–∞ {today}: {total_today:.2f} ‚ÇΩ")
    return ConversationHandler.END

async def cmd_endshift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ---------- Flask-¬´–∑–∞–≥–ª—É—à–∫–∞¬ª -----------------------------------------
def run_fake_web():
    app = Flask(__name__)

    @app.route("/")
    def index():
        return "Bot is alive!", 200

    # Render –∂–¥—ë—Ç –ª—é–±–æ–π –ø–æ—Ä—Ç; 8080 ‚Äî —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π.
    app.run(host="0.0.0.0", port=8080)

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------------------------------------
async def main() -> None:
    token = os.environ["TELEGRAM_TOKEN"]
    app = (
        ApplicationBuilder()
        .token(token)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–ª–∞—Ç–∏–Ω–∏—Ü–∞!)
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("startshift", cmd_startshift))
    app.add_handler(CommandHandler("fuel", cmd_fuel))
    app.add_handler(CommandHandler("endshift", cmd_endshift))

    # –°—Ü–µ–Ω–∞—Ä–∏–∏
    conv_register = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
        states={REG_CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_car)]},
        fallbacks=[],
    )
    conv_shift = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, save_start_odo)],
        states={},
        fallbacks=[],
    )
    conv_fuel = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^\d+([.,]\d+)?$"), fuel_liters)
        ],
        states={FUEL_COST: [MessageHandler(filters.Regex(r"^\d+([.,]\d+)?$"), fuel_cost)]},
        fallbacks=[],
    )

    app.add_handler(conv_register)
    app.add_handler(conv_shift)
    app.add_handler(conv_fuel)

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º Flask-–∑–∞–≥–ª—É—à–∫—É
    threading.Thread(target=run_fake_web, daemon=True).start()

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())


