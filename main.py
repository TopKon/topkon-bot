# -*- coding: utf-8 -*-
"""
TopKon Fleet Bot v5.0 ‚Äî Drivers, Managers, Admins, Multi-company
One-file bot with role-based workflows and real-time prompts
"""
import os, sys, subprocess, threading, asyncio, datetime
from zoneinfo import ZoneInfo
from typing import Final, Optional, Dict

# Auto-install dependencies
REQUIRE = [
    "python-telegram-bot==20.8",
    "gspread==6.0.2",
    "oauth2client==4.1.3",
    "Flask==2.3.3",
]
try:
    import telegram
except ModuleNotFoundError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", *REQUIRE])
    import telegram

from flask import Flask
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound

# Constants & Environments
TOKEN: Final[str] = os.getenv("TOKEN", "")
SPREADSHEET_ID: Final[str] = os.getenv("SPREADSHEET_ID", "")
CREDS_FILE: Final[str] = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "")
TZ = ZoneInfo("Europe/Moscow")
DEFAULT_ADMIN_UID = '1881053841'

# States
ROLE_SELECT, REG_NAME, REG_COMPANY, REG_CAR,
START_ODO, START_PHOTO,
FUEL_PHOTO, FUEL_COST, FUEL_LITERS,
END_ODO, END_PHOTO = range(11)

# Prompt helper
COMMANDS_TEXT = (
    "/startshift ‚Äî –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É\n"
    "/fuel ‚Äî –ó–∞–ø—Ä–∞–≤–∫–∞\n"
    "/endshift ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É\n"
    "/addcompany ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é (–∞–¥–º–∏–Ω)\n"
    "/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)\n"
    "/help ‚Äî –ü–æ–º–æ—â—å"  
)

def prompt_commands(): return f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{COMMANDS_TEXT}"

# Flask for Render
def _fake_web():
    app = Flask(__name__)
    @app.get("/")
    def ok(): return "Bot is alive!", 200
    app.run(host="0.0.0.0", port=8080)
threading.Thread(target=_fake_web, daemon=True).start()

# Google Sheets init
def _init_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
    client = gspread.authorize(creds)
    wb = client.open_by_key(SPREADSHEET_ID)
    # Main log
    log = wb.sheet1
    # Drivers
    try: drivers = wb.worksheet("Drivers")
    except WorksheetNotFound:
        drivers = wb.add_worksheet("Drivers", 1000, 4)
        drivers.append_row(["UID","Role","Company","Car"])
    # Companies
    try: comps = wb.worksheet("Companies")
    except WorksheetNotFound:
        comps = wb.add_worksheet("Companies", 100, 2)
        comps.append_row(["Name","ManagerUID"])
    return log, drivers, comps
LOG_WS, DRV_WS, COMP_WS = _init_sheets()
# In-memory caches
USERS: Dict[str,Dict] = {r[0]:{"role":r[1],"company":r[2],"car":r[3]} for r in DRV_WS.get_all_values()[1:]}
COMPANIES = {r[0]:r[1] for r in COMP_WS.get_all_values()[1:]}

# Helpers
def _now(): return datetime.datetime.now(TZ).isoformat(timespec="seconds")
def _append_log(uid, type_, **fields):
    row = [""]* (len(LOG_WS.row_values(1)))
    headers = LOG_WS.row_values(1)
    row[headers.index("Date")] = datetime.date.today(TZ).isoformat()
    row[headers.index("UID")] = uid
    row[headers.index("Role")] = USERS[uid]["role"]
    row[headers.index("Company")] = USERS[uid]["company"]
    row[headers.index("Type")] = type_
    row[headers.index("Time")] = _now()
    for k,v in fields.items():
        if k in headers: row[headers.index(k)] = str(v)
    LOG_WS.append_row(row)
def _last(field, uid, type_filter=None):
    recs = LOG_WS.get_all_records()
    for rec in reversed(recs):
        if rec["UID"]!=uid: continue
        if type_filter and rec["Type"]!=type_filter: continue
        try: return float(rec[field])
        except: continue
    return None

async def ensure_registered(update: Update):
    uid = str(update.effective_user.id)
    if uid not in USERS:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
        return False
    return True

# /start
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid in USERS:
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {ctx.user_data.get('name','')}!\n"+prompt_commands())
        return ConversationHandler.END
    # else new
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(r,callback_data=r)] for r in ("–í–æ–¥–∏—Ç–µ–ª—å","–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")])
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb)
    return ROLE_SELECT

async def role_select(update: Update, ctx):
    q=update.callback_query; await q.answer()
    role=q.data; ctx.user_data['role']=role
    await q.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role}")
    await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return REG_NAME

async def reg_name(update: Update, ctx):
    ctx.user_data['name']=update.message.text.strip()
    if ctx.user_data['role']=='–í–æ–¥–∏—Ç–µ–ª—å':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–∞–∑–µ):")
        return REG_COMPANY
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é (–û–û–û, –ò–ü –∏–ª–∏ –ê–û '–ù–∞–∑–≤–∞–Ω–∏–µ'):")
        return REG_COMPANY

async def reg_company(update: Update, ctx):
    comp=update.message.text.strip()
    role=ctx.user_data['role']; uid=str(update.effective_user.id)
    # if manager: notify admin
    if role=='–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å':
        # pending approval
        ctx.user_data['company']=comp
        await update.message.reply_text("–ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
        # notify admin
        await ctx.bot.send_message(DEFAULT_ADMIN_UID, f"–ù–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä {ctx.user_data['name']} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {comp}. –†–∞–∑—Ä–µ—à–∏—Ç—å? /approve_{uid}")
        return ConversationHandler.END
    else:
        # driver: check company exists
        if comp not in COMPANIES:
            await update.message.reply_text("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
            return ConversationHandler.END
        ctx.user_data['company']=comp
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        return REG_CAR

async def reg_car(update: Update, ctx):
    car=update.message.text.strip(); uid=str(update.effective_user.id)
    USERS[uid]={'role':ctx.user_data['role'],'company':ctx.user_data['company'],'car':car}
    DRV_WS.append_row([uid,ctx.user_data['role'],ctx.user_data['company'],car])
    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"+prompt_commands())
    return ConversationHandler.END

async def approve_mgr(update: Update, ctx):
    text=update.message.text; uid=text.split('_')[-1]
    if str(update.effective_user.id)!=DEFAULT_ADMIN_UID: return
    # approve
    comp=ctx.user_data.get('company')
    COMPANIES[comp]=uid; COMP_WS.append_row([comp,uid])
    await update.message.reply_text(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {USERS[uid]['name']} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è {comp}.")

# /startshift
async def startshift(update: Update, ctx):
    if not await ensure_registered(update): return
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã (–∫–º):")
    return START_ODO
async def start_odo(update: Update, ctx):
    try: odo=float(update.message.text)
    except: return await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    ctx.user_data['odo_start']=odo
    # out-of-shift travel
    last_end=_last('Odometer','%s'%update.effective_user.id,'End') or odo
    extra=odo - last_end
    if extra>0: await update.message.reply_text(f"–í—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ –≤–Ω–µ —Å–º–µ–Ω—ã: {extra:.1f} –∫–º.")
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞:")
    return START_PHOTO
async def start_photo(update: Update, ctx):
    if not update.message.photo: return await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    uid=str(update.effective_user.id)
    odo=ctx.user_data.pop('odo_start')
    _append_log(uid,'Start',Odometer=odo,Photo=update.message.photo[-1].file_id)
    await update.message.reply_text("‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!"+prompt_commands())
    return ConversationHandler.END

# /fuel
async def fuel(update: Update, ctx):
    if not await ensure_registered(update): return
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
    return FUEL_PHOTO
async def fuel_p(update: Update, ctx):
    if not update.message.photo: return await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
    ctx.user_data['fuel_photo']=update.message.photo[-1].file_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ (‚ÇΩ):")
    return FUEL_COST
async def fuel_cost(update: Update, ctx):
    try: cost=float(update.message.text)
    except: return await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    ctx.user_data['fuel_cost']=cost
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ç—Ä—ã:")
    return FUEL_LITERS
async def fuel_liters(update: Update, ctx):
    try: liters=float(update.message.text)
    except: return await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –ª–∏—Ç—Ä—ã:")
    uid=str(update.effective_user.id)
    _append_log(uid,'Fuel',Photo=ctx.user_data['fuel_photo'],Amount=ctx.user_data['fuel_cost'],Liters=liters)
    await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞."+prompt_commands())
    return ConversationHandler.END

# /endshift
async def endshift(update: Update, ctx):
    if not await ensure_registered(update): return
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã (–∫–º):")
    return END_ODO
async def end_odo(update: Update, ctx):
    try: odo=float(update.message.text)
    except: return await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    ctx.user_data['odo_end']=odo
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞:")
    return END_PHOTO
async def end_photo(update: Update, ctx):
    if not update.message.photo: return await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    uid=str(update.effective_user.id)
    odo_end=ctx.user_data.pop('odo_end')
    odo_start=_last('Odometer',uid,'Start') or odo_end
    km=odo_end-odo_start
    _append_log(uid,'End',Odometer=odo_end,Photo=update.message.photo[-1].file_id,Delta_km=km)
    # shift duration
    # (omitted duration calc for brevity)
    await update.message.reply_text(f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ {km:.1f} –∫–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!"+prompt_commands())
    return ConversationHandler.END

# fallback
async def unknown(update: Update, ctx):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª. " + prompt_commands())

# main
def main():
    if not TOKEN: raise RuntimeError("TOKEN not set")
    app = ApplicationBuilder().token(TOKEN).build()
    # conversations
    reg_conv = ConversationHandler(
        entry_points=[CommandHandler('start',cmd_start), CallbackQueryHandler(role_select)],
        states={
            ROLE_SELECT:[CallbackQueryHandler(role_select)],
            REG_NAME:[MessageHandler(filters.TEXT&~filters.COMMAND,reg_name)],
            REG_COMPANY:[MessageHandler(filters.TEXT&~filters.COMMAND,reg_company)],
            REG_CAR:[MessageHandler(filters.TEXT&~filters.COMMAND,reg_car)],
        }, fallbacks=[MessageHandler(filters.ALL,unknown)]
    )
    start_conv = ConversationHandler([CommandHandler('startshift',startshift)],{START_ODO:[MessageHandler(filters.TEXT&~filters.COMMAND,start_odo)],START_PHOTO:[MessageHandler(filters.PHOTO,start_photo)]},fallbacks=[MessageHandler(filters.ALL,unknown)])
    fuel_conv = ConversationHandler([CommandHandler('fuel',fuel) ],{FUEL_PHOTO:[MessageHandler(filters.PHOTO,fuel_p)],FUEL_COST:[MessageHandler(filters.TEXT&~filters.COMMAND,fuel_cost)],FUEL_LITERS:[MessageHandler(filters.TEXT&~filters.COMMAND,fuel_liters)]},fallbacks=[MessageHandler(filters.ALL,unknown)])
    end_conv = ConversationHandler([CommandHandler('endshift',endshift)],{END_ODO:[MessageHandler(filters.TEXT&~filters.COMMAND,end_odo)],END_PHOTO:[MessageHandler(filters.PHOTO,end_photo)]},fallbacks=[MessageHandler(filters.ALL,unknown)])
    app.add_handler(reg_conv)
    app.add_handler(start_conv)
    app.add_handler(fuel_conv)
    app.add_handler(end_conv)
    # admin
    app.add_handler(CommandHandler('addcompany', lambda u,c: c.bot.send_message(u.effective_chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:')))
    app.add_handler(CommandHandler('approve',approve_mgr))
    # stats placeholder
    # unknown
    app.add_handler(MessageHandler(filters.ALL,unknown))
    print("Bot started",flush=True)
    app.run_polling()

if __name__=='__main__':
    main()

















