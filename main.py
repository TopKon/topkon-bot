# main.py - Topkon Bot Complete
"""
–ö–æ—Ä–æ–±–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ–¥–∏–Ω —Ñ–∞–π–ª main.py
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –†–æ–ª–∏: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –í–æ–¥–∏—Ç–µ–ª—å
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
- –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã, –∑–∞–ø—Ä–∞–≤–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
- –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ –∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è (–±–æ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–ª—á–∏—Ç)
- Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render
"""
from __future__ import annotations
import os, sys, subprocess, threading, datetime
from zoneinfo import ZoneInfo
from typing import Dict, Optional

# Auto-install dependencies if missing
REQUIRE = [
    "python-telegram-bot==20.8",
    "gspread==6.0.2",
    "oauth2client==4.1.3",
    "Flask==2.3.3",
]
try:
    import telegram
except ModuleNotFoundError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", *REQUIRE])
    import telegram  # noqa: E402

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound

# Constants
token = os.getenv("TOKEN", "")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
GOOGLE_CREDS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "")
TZ = ZoneInfo("Europe/Moscow")
ADMIN_UID = '1881053841'

# Conversation states
(
    ROLE_SELECT,
    REG_COMPANY,
    REG_NAME,
    REG_CAR,
    START_ODO,
    FUEL_PHOTO,
    FUEL_COST,
    FUEL_LITERS,
    END_ODO,
) = range(9)

# Log sheet header
HEADER = [
    "–î–∞—Ç–∞", "UID", "–†–æ–ª—å", "–ö–æ–º–ø–∞–Ω–∏—è", "–§–ò–û", "–ê–≤—Ç–æ",
    "–¢–∏–ø", "–í—Ä–µ–º—è", "–û–î–û", "–§–æ—Ç–æ", "–°—É–º–º–∞", "–õ–∏—Ç—Ä—ã", "Œî_–∫–º", "–õ–∏—á–Ω—ã–π_–∫–º"
]
IDX = {h: i for i, h in enumerate(HEADER)}

# Flask stub for Render Free
def _fake_web():
    app = Flask(__name__)
    @app.get('/')
    def ping():
        return "OK", 200
    app.run(host='0.0.0.0', port=8080)
threading.Thread(target=_fake_web, daemon=True).start()

# Google Sheets initialization
def init_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDS, scope)
    gc = gspread.authorize(creds)
    wb = gc.open_by_key(SPREADSHEET_ID)
    # Log sheet
    log_ws = wb.sheet1
    if log_ws.row_values(1) != HEADER:
        log_ws.clear()
        log_ws.append_row(HEADER)
    # Users sheet
    try:
        usr_ws = wb.worksheet('Users')
    except WorksheetNotFound:
        usr_ws = wb.add_worksheet('Users', 1000, 5)
        usr_ws.append_row(["UID", "–†–æ–ª—å", "–ö–æ–º–ø–∞–Ω–∏—è", "–ê–≤—Ç–æ", "–§–ò–û"])
    return log_ws, usr_ws

LOG_WS, USR_WS = init_sheets()

# Load existing users
type UserInfo = Dict[str, str]
USERS: Dict[str, UserInfo] = {}
for row in USR_WS.get_all_values()[1:]:
    if len(row) < 5:
        continue
    uid, role, company, car, name = row[:5]
    USERS[uid] = {
        'role': role,
        'company': company,
        'car': car,
        'name': name,
    }

# Helpers
def now_iso() -> str:
    return datetime.datetime.now(TZ).isoformat(timespec='seconds')

def append_log(uid: str, **fields) -> None:
    row = [""] * len(HEADER)
    row[IDX['–î–∞—Ç–∞']]    = datetime.date.today(TZ).isoformat()
    row[IDX['UID']]     = uid
    info = USERS.get(uid, {})
    row[IDX['–†–æ–ª—å']]    = info.get('role', '')
    row[IDX['–ö–æ–º–ø–∞–Ω–∏—è']] = info.get('company', '')
    row[IDX['–§–ò–û']]     = info.get('name', '')
    row[IDX['–ê–≤—Ç–æ']]    = info.get('car', '')
    row[IDX['–¢–∏–ø']]     = fields.get('–¢–∏–ø', '')
    row[IDX['–í—Ä–µ–º—è']]   = now_iso()
    for k, v in fields.items():
        if k in IDX:
            row[IDX[k]] = str(v)
    LOG_WS.append_row(row)

def last_odo(uid: str, only_type: Optional[str] = None) -> int:
    for rec in reversed(LOG_WS.get_all_records()):
        if str(rec.get('UID')) != uid:
            continue
        if only_type and rec.get('–¢–∏–ø') != only_type:
            continue
        try:
            return int(rec.get('–û–î–û', 0))
        except:
            pass
    return 0

def menu_keyboard(uid: str) -> ReplyKeyboardMarkup:
    base = ['/startshift', '/fuel', '/endshift', '/help']
    if uid == ADMIN_UID:
        base.insert(0, '/addcompany')
    return ReplyKeyboardMarkup([base], resize_keyboard=True)

async def ensure_reg(update: Update) -> bool:
    uid = str(update.effective_user.id)
    if uid in USERS:
        return True
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
    return False

# Handlers
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid in USERS:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {USERS[uid]['name']}! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=menu_keyboard(uid)
        )
        return ConversationHandler.END
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup([['–í–æ–¥–∏—Ç–µ–ª—å','–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']], resize_keyboard=True)
    )
    return ROLE_SELECT

async def role_select(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice not in ('–í–æ–¥–∏—Ç–µ–ª—å','–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'):
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ROLE_SELECT
    ctx.user_data['role'] = choice
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é (–û–û–û/–ò–ü/–ê–û '–ù–∞–∑–≤–∞–Ω–∏–µ'): ",
        reply_markup=ReplyKeyboardRemove()
    )
    return REG_COMPANY

async def reg_company(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    comp = update.message.text.strip()
    ctx.user_data['company'] = comp
    uid = str(update.effective_user.id)
    role = ctx.user_data['role']
    if role == '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å':
        USERS[uid] = {'role': role, 'company': comp, 'car': '', 'name': ''}
        USR_WS.append_row([uid, role, comp, '', ''])
        await update.message.reply_text(
            "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.",
            reply_markup=menu_keyboard(uid)
        )
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return REG_NAME

async def reg_name(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:")
    return REG_CAR

async def reg_car(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    car = update.message.text.strip()
    USERS[uid] = {
        'role': '–í–æ–¥–∏—Ç–µ–ª—å',
        'company': ctx.user_data['company'],
        'car': car,
        'name': ctx.user_data['name'],
    }
    USR_WS.append_row([
        uid, '–í–æ–¥–∏—Ç–µ–ª—å', ctx.user_data['company'], car, ctx.user_data['name']
    ])
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        reply_markup=menu_keyboard(uid)
    )
    return ConversationHandler.END

async def startshift_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not await ensure_reg(update):
        return ConversationHandler.END
    uid = str(update.effective_user.id)
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã (–∫–º):",
        reply_markup=menu_keyboard(uid)
    )
    return START_ODO

async def start_odo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    try:
        v = int(update.message.text.replace(',', '.'))
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return START_ODO
    prev = last_odo(uid, 'End')
    extra = v - prev
    append_log(uid, –¢–∏–ø='Start', –û–î–û=v, –õ–∏—á–Ω—ã–π_–∫–º=extra)
    await update.message.reply_text(
        f"‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–æ–±–µ–≥ –≤–Ω–µ —Å–º–µ–Ω—ã: {extra} –∫–º.",
        reply_markup=menu_keyboard(uid)
    )
    return ConversationHandler.END

async def fuel_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not await ensure_reg(update):
        return ConversationHandler.END
    uid = str(update.effective_user.id)
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:", reply_markup=menu_keyboard(uid)
    )
    return FUEL_PHOTO

async def fuel_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
        return FUEL_PHOTO
    ctx.user_data['photo'] = update.message.photo[-1].file_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (‚ÇΩ):")
    return FUEL_COST

async def fuel_cost(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        c = float(update.message.text.replace(',', '.'))
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        return FUEL_COST
    ctx.user_data['cost'] = c
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ç—Ä—ã:")
    return FUEL_LITERS

async def fuel_liters(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    try:
        l = float(update.message.text.replace(',', '.'))
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ç—Ä—ã:")
        return FUEL_LITERS
    append_log(
        uid, –¢–∏–ø='Fuel', –§–æ—Ç–æ=ctx.user_data.pop('photo'), –°—É–º–º–∞=ctx.user_data.pop('cost'), –õ–∏—Ç—Ä—ã=l
    )
    await update.message.reply_text(
        "‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=menu_keyboard(uid)
    )
    return ConversationHandler.END

async def endshift_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not await ensure_reg(update):
        return ConversationHandler.END
    uid = str(update.effective_user.id)
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã (–∫–º):",
        reply_markup=menu_keyboard(uid)
    )
    return END_ODO

async def end_odo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    try:
        v = int(update.message.text.replace(',', '.'))
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return END_ODO
    start_val = last_odo(uid, 'Start')
    delta = v - start_val
    # calculate hours worked from last start
    recs = LOG_WS.get_all_records()
    start_time = None
    for r in reversed(recs):
        if str(r.get('UID')) == uid and r.get('–¢–∏–ø') == 'Start':
            start_time = r.get('–í—Ä–µ–º—è')
            break
    hours = 0.0
    if start_time:
        dt0 = datetime.datetime.fromisoformat(start_time)
        hours = (datetime.datetime.now(TZ) - dt0).total_seconds() / 3600
    append_log(uid, –¢–∏–ø='End', –û–î–û=v, Œî_–∫–º=delta)
    name = USERS[uid]['name']
    await update.message.reply_text(
        f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n{name}, –≤—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ {delta} –∫–º –∏ —Ä–∞–±–æ—Ç–∞–ª–∏ {hours:.1f} —á.\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
        reply_markup=menu_keyboard(uid)
    )
    return ConversationHandler.END

async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    await update.message.reply_text(
        "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/startshift ‚Äì –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É
/fuel ‚Äì –∑–∞–ø—Ä–∞–≤–∫–∞
/endshift ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É
/help ‚Äì —Å–ø—Ä–∞–≤–∫–∞",
        reply_markup=menu_keyboard(uid)
    )

async def unknown_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=menu_keyboard(uid)
    )

# Conversation definitions
reg_conv = ConversationHandler(
    entry_points=[CommandHandler("start", cmd_start)],
    states={
        ROLE_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, role_select)],
        REG_COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_company)],
        REG_NAME:    [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
        REG_CAR:     [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_car)],
    },
    fallbacks=[],
)
start_conv = ConversationHandler(
    entry_points=[CommandHandler("startshift", startshift_cmd)],
    states={START_ODO: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_odo)]},
    fallbacks=[],
)
fuel_conv = ConversationHandler(
    entry_points=[CommandHandler("fuel", fuel_cmd)],
    states={
        FUEL_PHOTO: [MessageHandler(filters.PHOTO, fuel_photo)],
        FUEL_COST:  [MessageHandler(filters.TEXT & ~filters.COMMAND, fuel_cost)],
        FUEL_LITERS:[MessageHandler(filters.TEXT & ~filters.COMMAND, fuel_liters)],
    },
    fallbacks=[],
)
end_conv = ConversationHandler(
    entry_points=[CommandHandler("endshift", endshift_cmd)],
    states={END_ODO: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_odo)]},
    fallbacks=[],
)

# Main

def main() -> None:
    if not token:
        raise RuntimeError("TOKEN env var not set")
    application = ApplicationBuilder().token(token).build()
    application.add_handler(reg_conv)
    application.add_handler(start_conv)
    application.add_handler(fuel_conv)
    application.add_handler(end_conv)
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(MessageHandler(filters.ALL, unknown_handler))
    print("üîÑ Bot polling started", flush=True)
    application.run_polling()

if __name__ == "__main__":
    main()






















