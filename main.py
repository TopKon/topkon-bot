# main.py - Topkon Bot with roles and fixed table loading
"""
–ö–æ—Ä–æ–±–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ–¥–∏–Ω —Ñ–∞–π–ª main.py
- –†–æ–ª–∏: –ê–¥–º–∏–Ω, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –í–æ–¥–∏—Ç–µ–ª—å
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
- –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã, –∑–∞–ø—Ä–∞–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã
- –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
- –§–∏–∫—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
- Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render
"""
from __future__ import annotations
import os, sys, subprocess, threading, datetime, asyncio
from zoneinfo import ZoneInfo
from typing import Dict, Optional

# –ê–≤—Ç–æ-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
REQUIRE = [
    "python-telegram-bot==20.8",
    "gspread==6.0.2",
    "oauth2client==4.1.3",
    "Flask==2.3.3",
]
try:
    import telegram
except ModuleNotFoundError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", *REQUIRE])
    import telegram

from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TOKEN", "")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "")
TZ = ZoneInfo("Europe/Moscow")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
(
    ROLE_SELECT, REG_NAME, REG_COMPANY, REG_CAR,
    START_ODO, START_PHOTO,
    FUEL_PHOTO, FUEL_COST, FUEL_LITERS,
    END_ODO, END_PHOTO
) = range(11)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–æ–≥–æ–≤
HEADER = ["–î–∞—Ç–∞","UID","–†–æ–ª—å","–ö–æ–º–ø–∞–Ω–∏—è","–§–ò–û","–ê–≤—Ç–æ","–¢–∏–ø","–í—Ä–µ–º—è","–û–î–û","–§–æ—Ç–æ","–°—É–º–º–∞","–õ–∏—Ç—Ä—ã","Œî_–∫–º","–õ–∏—á–Ω—ã–π_–∫–º"]
IDX = {h:i for i,h in enumerate(HEADER)}

# Flask-–∑–∞–≥–ª—É—à–∫–∞
def _fake_web():
    app = Flask(__name__)
    @app.get('/')
    def ping(): return "OK",200
    app.run(host='0.0.0.0',port=8080)
threading.Thread(target=_fake_web,daemon=True).start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def init_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDENTIALS, scope)
    gc = gspread.authorize(creds)
    wb = gc.open_by_key(SPREADSHEET_ID)
    # –õ–∏—Å—Ç –ª–æ–≥–æ–≤
    log_ws = wb.sheet1
    if log_ws.row_values(1) != HEADER:
        log_ws.clear()
        log_ws.append_row(HEADER)
    # –õ–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        drv = wb.worksheet('Users')
    except WorksheetNotFound:
        drv = wb.add_worksheet('Users',1000,5)
        drv.append_row(["UID","–†–æ–ª—å","–ö–æ–º–ø–∞–Ω–∏—è","–ê–≤—Ç–æ","–§–ò–û"])
    return log_ws, drv

LOG_WS, USR_WS = init_sheets()
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
USERS: Dict[str,Dict] = {}
for row in USR_WS.get_all_values()[1:]:
    if len(row)>=5 and row[0].isdigit():
        USERS[row[0]] = {"role":row[1],"company":row[2],"car":row[3],"name":row[4]}

# –•–µ–ª–ø–µ—Ä—ã
def now_iso(): return datetime.datetime.now(TZ).isoformat(timespec='seconds')
def append_log(uid:str, **fields):
    row = [""]*len(HEADER)
    row[IDX['–î–∞—Ç–∞']] = datetime.date.today(TZ).isoformat()
    row[IDX['UID']]  = uid
    info = USERS.get(uid,{})
    row[IDX['–†–æ–ª—å']] = info.get('role','')
    row[IDX['–ö–æ–º–ø–∞–Ω–∏—è']] = info.get('company','')
    row[IDX['–§–ò–û']]  = info.get('name','')
    row[IDX['–ê–≤—Ç–æ']]= info.get('car','')
    for k,v in fields.items():
        if k in IDX:
            row[IDX[k]] = v
    LOG_WS.append_row(row)

def last_odo(uid:str, only_type:Optional[str]=None)->int:
    for rec in reversed(LOG_WS.get_all_records()):
        if str(rec['UID'])==uid and (not only_type or rec['–¢–∏–ø']==only_type):
            try: return int(rec['–û–î–û'])
            except: pass
    return 0

def menu_keyboard(role=None):
    base = ['/startshift','/fuel','/endshift','/help']
    if role=='Admin': base.insert(0,'/addcompany')
    return ReplyKeyboardMarkup([base],resize_keyboard=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def ensure_reg(update:Update)->bool:
    uid=str(update.effective_user.id)
    if uid in USERS: return True
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
    return False

# Handlers
async def cmd_start(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    uid=str(update.effective_user.id)
    if uid in USERS:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {USERS[uid]['name']}! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.", reply_markup=menu_keyboard(USERS[uid]['role'])
        )
        return ConversationHandler.END
    # –Ω–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup([['–í–æ–¥–∏—Ç–µ–ª—å','–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å']],resize_keyboard=True)
    )
    return ROLE_SELECT

async def role_select(update:Update, ctx):
    role=update.message.text.strip()
    if role not in ('–í–æ–¥–∏—Ç–µ–ª—å','–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'):
        await update.message.reply_text("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ROLE_SELECT
    ctx.user_data['role']=role
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Ñ–æ—Ä–º–µ –û–û–û/–ò–ü/–ê–û '–ù–∞–∑–≤–∞–Ω–∏–µ':",
        reply_markup=ReplyKeyboardRemove()
    )
    return REG_COMPANY

async def reg_company(update:Update, ctx):
    comp=update.message.text.strip()
    ctx.user_data['company']=comp
    # –µ—Å–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
    if ctx.user_data['role']=='–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å':
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ñ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        # TODO: —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
        USERS[str(update.effective_user.id)] = {
            'role':'Driver','company':comp,'car':'','name':''
        }
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return REG_NAME

async def reg_name(update:Update, ctx):
    ctx.user_data['name']=update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:")
    return REG_CAR

async def reg_car(update:Update, ctx):
    uid=str(update.effective_user.id)
    BUS=ctx.user_data
    USERS[uid]={
        'role':BUS['role'],'company':BUS['company'],
        'name':BUS['name'],'car':update.message.text.strip()
    }
    USR_WS.append_row([uid,BUS['role'],BUS['company'],BUS['name'],USERS[uid]['car']])
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=menu_keyboard(BUS['role'])
    )
    return ConversationHandler.END

# /startshift
async def startshift_cmd(update:Update, ctx):
    if not await ensure_reg(update): return
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã (–∫–º):")
    return START_ODO

async def start_odo(update, ctx):
    try: v=int(update.message.text)
    except: await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ."); return START_ODO
    ctx.user_data['odo0']=v
    out= v - last_odo(str(update.effective_user.id),'End')
    append_log(str(update.effective_user.id), –¢–∏–ø='Start', –í—Ä–µ–º—è=now_iso(), –û–î–û=v, –õ–∏—á–Ω—ã–π_–∫–º=str(out))
    await update.message.reply_text(
        f"–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –í—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ –≤–Ω–µ —Å–º–µ–Ω—ã {out} –∫–º.", reply_markup=menu_keyboard(USERS[str(update.effective_user.id)]['role'])
    )
    return ConversationHandler.END

# /fuel –∏ /endshift –∞–Ω–∞–ª–æ–≥–∏...

async def help_cmd(update,ctx):
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", reply_markup=menu_keyboard())

async def unknown(update,ctx):
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.",
        reply_markup=menu_keyboard()
    )

# Main

def main():
    if not TOKEN: raise RuntimeError("TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    app=ApplicationBuilder().token(TOKEN).build()
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    reg=ConversationHandler(
        entry_points=[CommandHandler('start',cmd_start)],
        states={
            ROLE_SELECT:[MessageHandler(filters.TEXT,role_select)],
            REG_COMPANY:[MessageHandler(filters.TEXT,reg_company)],
            REG_NAME:[MessageHandler(filters.TEXT,reg_name)],
            REG_CAR:[MessageHandler(filters.TEXT,reg_car)],
            START_ODO:[MessageHandler(filters.TEXT,start_odo)],
        },fallbacks=[CommandHandler('cancel',lambda u,c: ConversationHandler.END)]
    )
    app.add_handler(reg)
    app.add_handler(CommandHandler('help',help_cmd))
    app.add_handler(MessageHandler(filters.COMMAND,unknown))
    print("Bot started")
    asyncio.run(app.initialize())
    app.run_polling()

if __name__=='__main__': main()


















