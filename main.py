# -*- coding: utf-8 -*-
"""
–¢–æ–ø–∫–æ–Ω‚Äë–±–æ—Ç ‚Äî –æ–¥–Ω–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
===============================
–û–¥–∏–Ω —Ñ–∞–π–ª (`topkon_bot.py`) —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞, auto‚Äëinstall –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –º–∏–Ω–∏‚ÄëFlask-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è Render Free.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TOKEN ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  SPREADSHEET_ID ‚Äî ID Google‚Äë—Ç–∞–±–ª–∏—Ü—ã
  GOOGLE_APPLICATION_CREDENTIALS ‚Äî –∏–º—è json‚Äë–∫–ª—é—á–∞ GCP

–ö–æ–º–∞–Ω–¥—ã:
  /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Å–ø—Ä–∞–≤–∫–∞
  /startshift ‚Äî –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã
  /fuel ‚Äî –∑–∞–ø—Ä–∞–≤–∫–∞
  /endshift ‚Äî –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã
  /changecar ‚Äî —Å–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
  /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
from __future__ import annotations
import os, sys, subprocess, datetime, threading
from zoneinfo import ZoneInfo
from typing import Optional, Final

# –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
REQUIRE = [
    "python-telegram-bot==20.8",
    "gspread==6.0.2",
    "oauth2client==4.1.3",
    "Flask==2.3.3",
]
try:
    import telegram
except ModuleNotFoundError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", *REQUIRE])
# –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
from flask import Flask
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound

# –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN: Final[str] = os.getenv("TOKEN", "")
TZ = ZoneInfo("Europe/Moscow")
(
    REG_NAME, REG_CAR,
    START_ODO, START_PHOTO,
    FUEL_PHOTO, FUEL_COST, FUEL_LITERS,
    END_ODO, END_PHOTO,
    CHANGE_CAR,
) = range(10)

_HEADER = [
    "–î–∞—Ç–∞","UID","–§–ò–û","–ê–≤—Ç–æ","–¢–∏–ø","–í—Ä–µ–º—è","–û–î–û","–§–æ—Ç–æ","–õ–∏—Ç—Ä—ã","–°—É–º–º–∞","Œî_–∫–º","–õ–∏—á–Ω—ã–π_–∫–º"
]
_COL_ID = {h: i for i, h in enumerate(_HEADER)}

# Flask-–∑–∞–≥–ª—É—à–∫–∞
def _fake_web():
    app = Flask(__name__)
    @app.get("/")
    def ok(): return "Bot is alive!", 200
    app.run(host="0.0.0.0", port=8080)
threading.Thread(target=_fake_web, daemon=True).start()

# Google Sheets
def _init_sheets():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        os.getenv("GOOGLE_APPLICATION_CREDENTIALS"), scope
    )
    client = gspread.authorize(creds)
    wb = client.open_by_key(os.getenv("SPREADSHEET_ID"))
    log_ws = wb.sheet1
    if log_ws.row_values(1) != _HEADER:
        log_ws.clear()
        log_ws.append_row(_HEADER)
    try:
        drv = wb.worksheet("Drivers")
    except WorksheetNotFound:
        drv = wb.add_worksheet("Drivers", 1000, 3)
        drv.append_row(["UID","–§–ò–û","–ê–≤—Ç–æ"])
    return log_ws, drv

LOG_WS, DRV_WS = _init_sheets()
DRIVERS = {r[0]: {"name": r[1], "car": r[2]} for r in DRV_WS.get_all_values()[1:]}

# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ

def _now(): return datetime.datetime.now(TZ)

def _append(uid: str, type_: str, **fields):
    if uid not in DRIVERS: return
    row = [""] * len(_HEADER)
    row[_COL_ID["–î–∞—Ç–∞"]] = _now().date().isoformat()
    row[_COL_ID["UID"]] = uid
    row[_COL_ID["–§–ò–û"]] = DRIVERS[uid]["name"]
    row[_COL_ID["–ê–≤—Ç–æ"]] = DRIVERS[uid]["car"]
    row[_COL_ID["–¢–∏–ø"]] = type_
    row[_COL_ID["–í—Ä–µ–º—è"]] = _now().isoformat(timespec="seconds")
    for k,v in fields.items():
        if k in _COL_ID: row[_COL_ID[k]] = v
    LOG_WS.append_row(row)

async def _need_reg(update: Update):
    uid = str(update.effective_user.id)
    if uid not in DRIVERS:
        await update.message.reply_text("üöó –°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return True
    return False

# ========== —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ==========
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid in DRIVERS:
        await update.message.reply_text(
            "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ: /startshift /fuel /endshift /changecar /help"
        )
        return ConversationHandler.END
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return REG_NAME

async def reg_name(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['name']=update.message.text.strip()
    await update.message.reply_text("üöò –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:")
    return REG_CAR

async def reg_car(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid=str(update.effective_user.id)
    name=ctx.user_data.pop('name')
    car=update.message.text.strip()
    DRV_WS.append_row([uid,name,car])
    DRIVERS[uid]={'name':name,'car':car}
    await update.message.reply_text(f"‚úÖ {name}, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return ConversationHandler.END

reg_conv=ConversationHandler(
    entry_points=[CommandHandler('start',cmd_start)],
    states={
        REG_NAME:[MessageHandler(filters.TEXT&~filters.COMMAND,reg_name)],
        REG_CAR: [MessageHandler(filters.TEXT&~filters.COMMAND,reg_car)],
    },
    fallbacks=[]
)

# ========== —Å–º–µ–Ω–∞ –∞–≤—Ç–æ ==========
async def cmd_changecar(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if await _need_reg(update): return ConversationHandler.END
    uid=str(update.effective_user.id)
    await update.message.reply_text(f"{DRIVERS[uid]['name']}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:")
    return CHANGE_CAR

async def change_car(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid=str(update.effective_user.id)
    new=update.message.text.strip()
    # –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–∏—Å—Ç–µ
    col=DRV_WS.col_values(1)
    row=col.index(uid)+1
    DRV_WS.update_cell(row,3,new)
    DRIVERS[uid]['car']=new
    await update.message.reply_text(f"‚úÖ –ù–æ–º–µ—Ä –∞–≤—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {new}")
    return ConversationHandler.END

change_conv=ConversationHandler(
    entry_points=[CommandHandler('changecar',cmd_changecar)],
    states={ CHANGE_CAR:[MessageHandler(filters.TEXT&~filters.COMMAND,change_car)] },
    fallbacks=[]
)

# ========== –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã ==========
async def cmd_startshift(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if await _need_reg(update): return ConversationHandler.END
    uid, name=str(update.effective_user.id),DRIVERS[str(update.effective_user.id)]['name']
    await update.message.reply_text(f"{name}, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã:")
    return START_ODO

async def start_odo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        ctx.user_data['odo_start']=int(update.message.text)
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return START_ODO
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞:")
    return START_PHOTO

async def start_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return START_PHOTO
    uid=str(update.effective_user.id)
    odo=ctx.user_data.pop('odo_start')
    prev=_get_last('End',uid) or odo
    personal=odo-prev
    _append(uid,'Start',–û–î–û=odo,–§–æ—Ç–æ=update.message.photo[-1].file_id,–õ–∏—á–Ω—ã–π_–∫–º=personal)
    await update.message.reply_text(f"‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞.")
    return ConversationHandler.END

start_conv=ConversationHandler(
    entry_points=[CommandHandler('startshift',cmd_startshift)],
    states={
        START_ODO:[MessageHandler(filters.TEXT&~filters.COMMAND,start_odo)],
        START_PHOTO:[MessageHandler(filters.PHOTO,start_photo)]
    },
    fallbacks=[]
)

# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ –æ–¥–æ–º–µ—Ç—Ä–∞

def _get_last(type_,uid):
    for rec in reversed(LOG_WS.get_all_records()):
        if rec['UID']==uid and rec['–¢–∏–ø']==type_:
            try: return int(rec['–û–î–û'])
            except: pass
    return None

# ========== –∑–∞–ø—Ä–∞–≤–∫–∞ ==========
async def cmd_fuel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if await _need_reg(update): return ConversationHandler.END
    await update.message.reply_text(f"{DRIVERS[str(update.effective_user.id)]['name']}, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
    return FUEL_PHOTO

async def fuel_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ —á–µ–∫–∞, –ø—Ä–∏—à–ª–∏—Ç–µ:")
        return FUEL_PHOTO
    ctx.user_data['fuel_photo']=update.message.photo[-1].file_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (‚ÇΩ):")
    return FUEL_COST

async def fuel_cost(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try: ctx.user_data['fuel_cost']=float(update.message.text)
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å—É–º–º—É:")
        return FUEL_COST
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ç—Ä—ã:")
    return FUEL_LITERS

async def fuel_liters(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try: liters=float(update.message.text)
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ª–∏—Ç—Ä—ã:")
        return FUEL_LITERS
    uid=str(update.effective_user.id)
    _append(uid,'Fuel',–§–æ—Ç–æ=ctx.user_data.pop('fuel_photo'),–°—É–º–º–∞=ctx.user_data.pop('fuel_cost'),–õ–∏—Ç—Ä—ã=liters)
    await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    return ConversationHandler.END

fuel_conv=ConversationHandler(
    entry_points=[CommandHandler('fuel',cmd_fuel)],
    states={
        FUEL_PHOTO:[MessageHandler(filters.PHOTO,fuel_photo)],
        FUEL_COST:[MessageHandler(filters.TEXT&~filters.COMMAND,fuel_cost)],
        FUEL_LITERS:[MessageHandler(filters.TEXT&~filters.COMMAND,fuel_liters)]
    },
    fallbacks=[]
)

# ========== –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã ==========
async def cmd_endshift(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if await _need_reg(update): return ConversationHandler.END
    await update.message.reply_text(f"{DRIVERS[str(update.effective_user.id)]['name']}, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –Ω–∞ –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã:")
    return END_ODO

async def end_odo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try: ctx.user_data['odo_end']=int(update.message.text)
    except:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return END_ODO
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞:")
    return END_PHOTO

async def end_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏—Ç–µ:")
        return END_PHOTO
    uid=str(update.effective_user.id)
    odo_end=ctx.user_data.pop('odo_end')
    start_time, start_odo = _get_last_record(uid,'Start')
    delta=odo_end-start_odo
    _append(uid,'End',–û–î–û=odo_end,–§–æ—Ç–æ=update.message.photo[-1].file_id,Œî_–∫–º=delta)
    # –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
    hours=((_now()-start_time).total_seconds()/3600)
    name=DRIVERS[uid]['name']
    await update.message.reply_text(
        f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {name}, –≤—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ {delta} –∫–º –∏ —Ä–∞–±–æ—Ç–∞–ª–∏ {hours:.1f} —á. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!"
    )
    return ConversationHandler.END

end_conv=ConversationHandler(
    entry_points=[CommandHandler('endshift',cmd_endshift)],
    states={
        END_ODO:[MessageHandler(filters.TEXT&~filters.COMMAND,end_odo)],
        END_PHOTO:[MessageHandler(filters.PHOTO,end_photo)]
    },
    fallbacks=[]
)

# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏/ODO

def _get_last_record(uid,type_):
    for rec in reversed(LOG_WS.get_all_records()):
        if rec['UID']==uid and rec['–¢–∏–ø']==type_:
            t=datetime.datetime.fromisoformat(rec['–í—Ä–µ–º—è'])
            return t,int(rec['–û–î–û'])
    return _now(),0

# ========== help ==========
async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è /start /startshift /fuel /endshift /changecar /help")

# ========== main ==========
def main():
    if not TOKEN: raise RuntimeError("TOKEN env var not set")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(reg_conv)
    app.add_handler(change_conv)
    app.add_handler(start_conv)
    app.add_handler(fuel_conv)
    app.add_handler(end_conv)
    app.add_handler(CommandHandler('help', help_cmd))
    print("üîÑ Bot started", flush=True)
    app.run_polling()

if __name__ == '__main__':
    main()













